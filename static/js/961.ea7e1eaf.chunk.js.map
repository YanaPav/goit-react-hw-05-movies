{"version":3,"file":"static/js/961.ea7e1eaf.chunk.js","mappings":"kOA6EA,UAzEqB,WAAO,IAAD,MACzB,GAAkCA,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MAqBjB,IAjBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAE4BC,EAAAA,EAAAA,IAAeL,GAF3C,OAEUM,EAFV,OAGIT,EAAaS,GAHjB,gDAKIP,EAAS,EAAD,IALZ,0DADc,sBAYd,OAZe,WAAD,wBAUdQ,GAEO,WACLR,EAAS,KACV,CACF,GAAE,CAACC,IAECJ,EAAL,CAEA,IAAQY,EACNZ,EADMY,YAAaC,EACnBb,EADmBa,MAAOC,EAC1Bd,EAD0Bc,aAAcC,EACxCf,EADwCe,aAAcC,EACtDhB,EADsDgB,SAAUC,EAChEjB,EADgEiB,OAGlE,OACE,iCACE,SAAC,KAAD,CAAMC,IAAI,UAAAZ,EAASa,aAAT,eAAgBC,OAAQ,IAAlC,qBACClB,IAAS,oCACV,4BACE,gBACEmB,IAAG,6CAAwCT,GAC3CU,IAAKT,EACLU,MAAM,SAER,4BACE,0BACGV,EADH,KACYW,OAAOC,SAASX,GAD5B,QAGA,wCAAgBY,KAAKC,MAAqB,GAAfZ,GAA3B,QACA,sCACA,uBAAIC,KACJ,oCACA,uBAAIC,EAAOW,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,eAG7C,4BACE,mDACA,2BACE,yBACE,SAAC,KAAD,CAAMb,GAAG,YAAOC,MAAO,CAAEC,KAAI,UAAEd,EAASa,aAAX,aAAE,EAAgBC,MAA/C,qBAIF,yBACE,SAAC,KAAD,CAAMF,GAAG,UAAUC,MAAO,CAAEC,KAAI,UAAEd,EAASa,aAAX,aAAE,EAAgBC,MAAlD,8BAMN,SAAC,EAAAY,SAAD,CAAUC,SAAU,KAApB,UACE,SAAC,KAAD,QA1CgB,CA8CvB,C","sources":["pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import { useState, useEffect, Suspense } from 'react';\nimport { Outlet, useParams, Link, useLocation } from 'react-router-dom';\nimport { fetchMovieById } from '../../api';\n\nconst MovieDetails = () => {\n  const [movieDtls, setMovieDtls] = useState('');\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n  const location = useLocation();\n\n  // console.log(location);\n\n  useEffect(() => {\n    async function getMovieDtls() {\n      try {\n        const movieInfo = await fetchMovieById(movieId);\n        setMovieDtls(movieInfo);\n      } catch (e) {\n        setError(e);\n      }\n    }\n\n    getMovieDtls();\n\n    return () => {\n      setError(null);\n    };\n  }, [movieId]);\n\n  if (!movieDtls) return;\n\n  const { poster_path, title, release_date, vote_average, overview, genres } =\n    movieDtls;\n\n  return (\n    <>\n      <Link to={location.state?.from || '/'}>Go back</Link>\n      {error && <div>error</div>}\n      <div>\n        <img\n          src={`https://image.tmdb.org/t/p/original${poster_path}`}\n          alt={title}\n          width=\"250\"\n        />\n        <div>\n          <h2>\n            {title} ({Number.parseInt(release_date)})\n          </h2>\n          <p>User Score: {Math.round(vote_average * 10)}%</p>\n          <h3>Overview</h3>\n          <p>{overview}</p>\n          <h3>Genres</h3>\n          <p>{genres.map(genre => genre.name).join(', ')}</p>\n        </div>\n      </div>\n      <div>\n        <p>Additional information</p>\n        <ul>\n          <li>\n            <Link to=\"сast\" state={{ from: location.state?.from }}>\n              Cast\n            </Link>\n          </li>\n          <li>\n            <Link to=\"reviews\" state={{ from: location.state?.from }}>\n              Reviews\n            </Link>\n          </li>\n        </ul>\n      </div>\n      <Suspense fallback={null}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["useState","movieDtls","setMovieDtls","error","setError","movieId","useParams","location","useLocation","useEffect","fetchMovieById","movieInfo","getMovieDtls","poster_path","title","release_date","vote_average","overview","genres","to","state","from","src","alt","width","Number","parseInt","Math","round","map","genre","name","join","Suspense","fallback"],"sourceRoot":""}